<?xml version="1.0"?>
<project name="GIGAZONEGAMING" basedir=".." default="warning">
    <target name="warning">
        <echo message=""/>
    </target>

    <!-- project name/main directory -->
    <property name="project.name" value="GIGAZONEGAMING" />
    <!-- environment, default to staging for deployment/testing -->
    <property name="env" value="development" override="true" />

    <property name="dir.build" value="build/"/>

    <!-- default configuration variables -->
    <property name="dir.deploy" value="${dir.build}/${env}-deployment" />
    <property name="url.deploy" value="http://example.local" override="true" />

    <!-- default host variables -->
    <property name="ftp.host" value="ftp.example.local" override="true" />
    <property name="ftp.port" value="21" override="true" />
    <property name="ftp.username" value="username" override="true" />
    <property name="ftp.password" value="password" override="true" />
    <property name="ftp.destinationDir" value="/" override="true" />
    <property name="ftp.mode" value="binary" override="true" />
    <property name="ssh.port" value="22" override="true" />

    <!-- base paths for project -->
    <property name="dir.tests" value="tests"/>
    <property name="dir.www" value="public_html/"/>
    <property name="dir.vendor" value="vendor/"/>
    <property name="dir.wp-content" value="${dir.www}wp-content/"/>
    <property name="dir.reports" value="${dir.build}reports/"/>
    <property name="dir.package" value="${dir.build}packaging/"/>
    <property name="dir.node" value="node_modules/" />
    <property name="dir.sql" value="sql/" />
    <property name="dir.vagrant" value=".vagrant/" />
    <property name="dir.phpstorm" value=".idea/" />
    <property name="dir.puphpet" value="puphpet/" />
    <property name="dir.archive" value="archive/" />
    <property name="dir.originals" value="originals/" />
    <property name="dir.cache" value="storage/framework/cache/" />
    <property name="dir.remote.coverage" value="${dir.www}c3/" />

    <!-- get config file for this environment -->
    <property name="configFile" value="${project.basedir}/${dir.build}config/${env}.config" />
    <available file="${configFile}" property="configFileFound" value="true"/>
    <if id="configFileFound">
        <then>
            <property file="${configFile}" />
        </then>
        <else>
            <echo message="Missing configuration file (${hostFile})! Deployment environment was set to '${env}', a config file was created" />
            <echo file="${configFile}"
                  append="false"
                  message="dir.deploy=${dir.deploy}${line.separator}url.deploy=${url.deploy}${line.separator}" />
            <property file="${configFile}" />
        </else>
    </if>

    <!-- get host file for this environment -->
    <property name="hostFile" value="${project.basedir}/${dir.build}config/hosts/${env}.host" />
    <available file="${hostFile}" property="hostFileFound" value="true"/>
    <if id="hostFileFound">
        <then>
            <property file="${hostFile}" />
        </then>
        <else>
            <echo message="Missing host file (${hostFile})! Deployment environment was set to '${env}', a host file was created" />
            <echo file="${hostFile}"
                  append="false"
                  message="ftp.host=${ftp.host}${line.separator}ftp.port=${ftp.port}${line.separator}ftp.username=${ftp.username}${line.separator}ftp.password=${ftp.password}${line.separator}ftp.destinationDir=${ftp.destinationDir}${line.separator}ftp.mode=${ftp.mode}${line.separator}ssh.port=${ssh.port}" />
            <property file="${hostFile}" />
        </else>
    </if>

    <!-- release name -->
    <property name="releaseName" value="master" override="true"/>

    <!-- ============================================  -->
    <!-- Fileset: project source files, all files      -->
    <!-- that should be bundled when deployed to       -->
    <!-- staging/production                            -->
    <!-- ============================================  -->
    <fileset dir="." id="project.source" defaultexcludes="true">
        <!-- includes -->
        <include name="*/**" />
        <!-- excludes -->
        <exclude name=".git/" />
        <exclude name=".env" />
        <exclude name="${dir.cache}**/*" />
        <exclude name="${dir.remote.coverage}**/*" />
        <exclude name="${dir.build}**/*" />
        <exclude name="${dir.node}**/*" />
        <exclude name="${dir.phpstorm}**/*" />
        <exclude name="${dir.vagrant}**/*" />
        <exclude name="${dir.puphpet}**/*" />
        <exclude name="Vagrantfile" />
        <exclude name="${dir.archive}**/*" />
        <exclude name="${dir.originals}**/*" />
        <exclude name="**/README.*" />
        <exclude name="**/HISTORY.*" />

        <!-- exclude laravel session storage -->
        <exclude name="storage/framework/sessions/**/*" />
        <include name="storage/framework/sessions/.gitignore" />

        <!-- exclude laravel view storage -->
        <exclude name="storage/framework/views/**/*" />
        <include name="storage/framework/views/.gitignore" />

        <!-- exclude laravel log storage -->
        <exclude name="storage/logs/**/*.log" />

        <!-- exclude wordpress storage -->
        <exclude name="storage/framework/wordpress/**/*" />
        <include name="storage/framework/wordpress/.gitignore" />

        <!-- exclude composer vendor folder, it will be populated on server -->
        <exclude name="${dir.vendor}**/*" />

        <!-- exclude wordpress uploads folder -->
        <exclude name="${dir.wp-content}uploads/**/*" />

        <!-- VCS files -->
        <exclude name=".gitignore" />
        <!-- folders created by puppet -->
        <exclude name="${dir.www}icons/**/*" />
        <exclude name="${dir.www}html/**/*" />
        <exclude name="${dir.www}error/**/*" />
        <exclude name="${dir.www}manual/**/*" />
        <exclude name="icons/**/*" />
        <exclude name="html/**/*" />
        <exclude name="error/**/*" />
        <exclude name="manual/**/*" />
    </fileset>

    <!-- ============================================  -->
    <!-- Fileset: project source files sans            -->
    <!-- library files                                 -->
    <!-- ============================================  -->
    <fileset dir="." id="project.source.sans.libs">
        <include name="**/*.php"/>
        <exclude name="${dir.vendor}**/*.php" />
        <exclude name="${dir.build}**/*" />
        <exclude name=".phpstorm.meta.php" />
        <exclude name="_ide_helper.php" />
        <exclude name="c3.php" />
    </fileset>

    <!-- ============================================  -->
    <!-- Target: Confirm config and host files exist   -->
    <!-- ============================================  -->
    <target name="confirm_config">
        <!-- check that the env.config file exists-->
        <available file="${configFile}" property="configFileFound" value="true"/>
        <fail unless="configFileFound" message="Missing host configuration file (${configFile})!" />

        <!-- check that the env.host file exists -->
        <available file="${hostFile}" property="hostFileFound" value="true"/>
        <fail unless="hostFileFound" message="Missing host configuration file (${hostFile})!" />
    </target>

    <!-- ============================================  -->
    <!-- Target: Collect uncommitted files             -->
    <!-- ============================================  -->
    <target name="collect_uncommitted_files">
        <exec command="hg status -m -a -r -d" output="${dir.build}uncommitted_files.txt" />
    </target>

    <!-- ============================================  -->
    <!-- Target: prepare tests                         -->
    <!-- ============================================  -->
    <target name="prepare">
        <delete dir="${dir.package}"/>
        <delete dir="${dir.package}${env}" />
        <delete dir="${dir.package}${env}/${phing.project.name}" />
        <delete dir="${dir.deploy}" />
        <mkdir dir="${dir.package}"/>
        <mkdir dir="${dir.reports}"/>

        <!-- run install -->
        <exec command="bash install.sh" level="verbose" />

    </target>

    <!-- ============================================  -->
    <!-- Target: metrics                               -->
    <!-- ============================================  -->
    <target name="metrics" depends="prepare, lint">
        <echo message="Some of these targets are *very* memory intensive. You may have to increase your memory_limit in php.ini" />
        <phingcall target="run-tests" />
        <!--<phingcall target="phploc" />-->
        <!--<phingcall target="depend" />-->
        <!--<phingcall target="cpd" />-->
        <!--<phingcall target="churn-grep" />-->
        <!--<phingcall target="phpmd" />-->
        <!--<phingcall target="codesniffer" />-->
        <!--<phingcall target="cleanup-phpunit-report" />-->
    </target>

    <!-- ============================================  -->
    <!-- Target: Linting and Metrics                   -->
    <!-- ============================================  -->
    <target name="standards" depends="lint, metrics" />

    <!-- ============================================  -->
    <!-- Target: Package                               -->
    <!-- ============================================  -->
    <target name="package" depends="prepare, standards" description="Packages source file for deployment to remote host">

        <delete file="${dir.build}${phing.project.name}-${env}-${releaseName}.tar.gz" />
        <delete file="${dir.build}${phing.project.name}-${env}-${releaseName}.zip" />
        <delete dir="${dir.package}" />
        <mkdir dir="${dir.package}" />
        <mkdir dir="${dir.package}${env}" />
        <mkdir dir="${dir.package}${env}/${phing.project.name}" />

        <!-- copy all source files to package directory -->
        <echo msg="Copying files to build directory" />
        <copy todir="${dir.package}" overwrite="true" includeemptydirs="false">
            <fileset refid="project.source" />
        </copy>
        <delete>
            <fileset dir="${dir.package}">
                <include name="*.git" />
                <include name="*.gitignore" />
            </fileset>
        </delete>

        <phplint haltonfailure="true">
            <fileset dir="${dir.package}">
                <include name="**/*.php"/>
                <exclude name="${dir.vendor}**/*.php" />
                <exclude name=".phpstorm.meta.php" />
                <exclude name="_ide_helper.php" />
                <exclude name="c3.php" />
            </fileset>
        </phplint>

        <tar destfile="${dir.build}${phing.project.name}-${env}-${releaseName}.tar.gz" compression="gzip">
            <fileset dir="${dir.package}">
                <include name="**/**" />
            </fileset>
        </tar>

    </target>

    <!-- ============================================  -->
    <!-- Target: cleanup after packaging               -->
    <!-- ============================================  -->
    <target name="cleanup">
        <delete dir="${dir.package}" />
        <delete dir="${dir.package}${env}" />
        <delete dir="${dir.package}${env}/${phing.project.name}" />
        <delete dir="${dir.deploy}" />

    </target>

    <!-- ============================================  -->
    <!-- Target: Composer Refresh                      -->
    <!-- Refreshes remote install of Composer          -->
    <!-- ============================================  -->
    <target name="composer_refresh" description="refresh composer install">

        <!-- install fresh version of composer over on server side-->
        <if>
            <equals arg1="${env}" arg2="development" />
            <then>
                <echo message="Composer install is not required for ${env} environment" />
            </then>
            <else>
                <ssh username="${ftp.username}" password="${ftp.password}" host="${ftp.host}" port="${ssh.port}" command="cd /home/${ftp.username}; if [ ! -f composer.phar ]; then wget https://getcomposer.org/composer.phar; fi; php composer.phar self-update; rm -Rf vendor; php composer.phar install; rm -f composer.phar" display="true"  />
            </else>
        </if>

    </target>
    <!-- ============================================  -->
    <!-- Target: Artisan Migrate                       -->
    <!-- Run migration on remote                       -->
    <!-- ============================================  -->
    <target name="artisan_migrate" description="run laravel artisan migrate on remote">

        <!--
     install fresh version of composer over on server side
      -->
        <if>
            <equals arg1="${env}" arg2="development" />
            <then>
                <echo message="migration is not required for ${env} environment" />
            </then>
            <else>
                <!-- ssh into server and turn down laravel and wordpress, then run migrations and bring both wordpress and laravel back up -->
                <ssh username="${ftp.username}" password="${ftp.password}" host="${ftp.host}" port="${ssh.port}" command="cd /home/${ftp.username}; php artisan down; php artisan wp:down; php artisan migrate --force; php artisan up; php artisan wp:up" display="true"  />
            </else>
        </if>

    </target>

    <!-- ============================================  -->
    <!-- Target: Extract Package                       -->
    <!-- Clean and extract the packaged archive        -->
    <!-- ============================================  -->

    <target name="extract_package" description="extract the current build archive" >
        <echo message="Resetting ${env} deploy files" />
        <delete dir="${dir.deploy}" />
        <mkdir dir="${dir.deploy}" />
        <untar file="${dir.build}${phing.project.name}-${env}-${releaseName}.tar.gz" todir="${dir.deploy}" />
    </target>

    <!-- ============================================  -->
    <!-- Target: Deployment                            -->
    <!-- Depends on "env" for server deployment        -->
    <!-- ============================================  -->

    <target name="deploy" depends="package" description="Deploys the current working copy to a remote host">

        <if>
            <equals arg1="${env}" arg2="development" />
            <then>
                <echo message="deployment not needed in ${env} environment" />
            </then>
            <else>
                <phingcall target="extract_package" />

                <echo message="Deploying files to ${ftp.host}" />
                <ftpdeploy
                        host="${ftp.host}"
                        password="${ftp.password}"
                        username="${ftp.username}"
                        dir="${ftp.destinationDir}"
                        mode="${ftp.mode}"
                        port="${ftp.port}">
                    <fileset dir="${dir.deploy}" />
                </ftpdeploy>

                <echo message="${env} deploy complete!"/>
                <delete dir="${dir.deploy}" />

            </else>
        </if>

        <!-- install fresh version of composer over on server side -->
        <phingcall target="composer_refresh" />
        <!-- run migrations on remote -->
        <phingcall target="artisan_migrate" />


        <!-- run final cleanup task -->
        <phingcall target="cleanup" />

    </target>

    <!-- ============================================  -->
    <!-- Target: PHP Lint                              -->
    <!-- ============================================  -->
    <target name="lint">
        <phplint haltonfailure="true" level="verbose">
            <fileset refid="project.source.sans.libs" />
        </phplint>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP Copy paste detector               -->
    <!-- ============================================  -->
    <!--  -->
    <target name="cpd" depends="prepare">
        <!-- http://www.unit_tests.info/trac/ticket/1061
        <phpcpd>
            <fileset refid="project.source.sans.libs" />
            <formatter type="pmd" outfile="${dir.reports}cpd.xml" />
        </phpcpd>-->
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP mess detector                     -->
    <!-- ============================================  -->
    <target name="phpmd" depends="prepare">
        <phpmd>
            <fileset refid="project.source.sans.libs" />
            <formatter type="xml" outfile="${dir.reports}pmd.xml"/>
        </phpmd>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP depend                            -->
    <!-- ============================================  -->
    <target name="depend" depends="prepare">
        <phpdepend>
            <fileset refid="project.source.sans.libs" />
            <logger type="jdepend-xml" outfile="${dir.reports}jdepend.xml"/>
            <analyzer type="coderank-mode" value="method"/>
        </phpdepend>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP code sniffer                      -->
    <!-- ============================================  -->
    <target name="codesniffer" depends="prepare">
        <echo message="If you don't have the PSR standards installed, just follow the instructions here: https://github.com/klaussilveira/phpcs-psr"/>
        <phpcodesniffer standard="PSR1" verbosity="1">
            <fileset refid="project.source.sans.libs"/>
            <formatter type="checkstyle" outfile="/wamp/www/${project.name}/${dir.reports}codesniffer.xml"/>
            <formatter type="summary"
                       outfile="/wamp/www/${project.name}/${dir.reports}codesniffer-summary.xml"/>
        </phpcodesniffer>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP LOC                               -->
    <!-- ============================================  -->
    <target name="phploc" depends="prepare">
        <exec command="phploc --log-xml ${dir.reports}phploc.xml --exclude xxx ${project.basedir}/" />
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP DOC                               -->
    <!-- ============================================  -->
    <target name="phpdoc" depends="prepare">
        <exec command="phpdoc -d classes,includes,modules,styles -t ${dir.reports}docs --template=responsive-twig" />
    </target>

    <!-- ============================================  -->
    <!-- Target: Run Tests                             -->
    <!-- ============================================  -->
    <target name="run-tests" depends="vagrant">
        <exec command="bash testing.sh" checkreturn="true" passthru="true" />
    </target>


    <!-- ============================================  -->
    <!-- Target: Vagrant                               -->
    <!-- Spin up a vagrant box                         -->
    <!-- ============================================  -->
    <target name="vagrant">
        <exec command="vagrant up" />
    </target>


    <!-- ============================================  -->
    <!-- Target: PHP Unit Cleanup                      -->
    <!-- ============================================  -->
    <target name="cleanup-phpunit-report">
        <copy file="${dir.build}tests/${dir.reports}test-logs.xml" tofile="${dir.reports}test-logs.xml" overwrite="true"/>
        <delete dir="${dir.build}tests/${dir.build}" verbose="true" failonerror="true" />
    </target>

</project>
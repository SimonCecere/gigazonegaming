<?xml version="1.0"?>
<project name="GIGAZONEGAMING" basedir=".." default="message:warning">
    <target name="message:warning">
        <echo message=""/>
    </target>

    <!-- project name/main directory -->
    <property name="project.name" value="GIGAZONEGAMING"/>
    <!-- environment, default to staging for deployment/testing -->
    <property name="env" value="development" override="true"/>

    <property name="releaseName" value="master" override="true"/>

    <property name="build_dir" value="build/"/>

    <!-- base paths for project -->
    <property name="dir.tests" value="tests"/>
    <property name="dir.www" value="public_html/"/>
    <property name="dir.vendor" value="vendor/"/>
    <property name="dir.wp-content" value="${dir.www}wp-content/"/>
    <property name="dir.reports" value="${build_dir}reports/"/>
    <property name="dir.package" value="${build_dir}packaging/"/>
    <property name="dir.node" value="node_modules/"/>
    <property name="dir.sql" value="sql/"/>
    <property name="dir.vagrant" value=".vagrant/"/>
    <property name="dir.phpstorm" value=".idea/"/>
    <property name="dir.puphpet" value="puphpet/"/>
    <property name="dir.archive" value="archive/"/>
    <property name="dir.originals" value="originals/"/>

    <!-- Laravel storage paths -->
    <property name="dir.storage" value="storage/"/>
    <property name="dir.storage.framework" value="${dir.storage}framework/"/>
    <property name="dir.storage.framework.cache" value="${dir.storage.framework}cache/"/>
    <property name="dir.storage.framework.session" value="${dir.storage.framework}sessions/"/>
    <property name="dir.storage.framework.views" value="${dir.storage.framework}views/"/>
    <property name="dir.storage.wordpress" value="${dir.storage}wordpress/"/>
    <property name="dir.storage.logs" value="${dir.storage}logs/"/>
    <property name="dir.storage.app.public" value="${dir.storage}app/public/"/>

    <!-- path to remote coverage -->
    <property name="dir.remote.coverage" value="${dir.www}c3/"/>

    <!-- get config file for this environment -->
    <property name="configFile" value="${project.basedir}/${build_dir}config/${env}.config"/>
    <available file="${configFile}" property="configFileFound" type="file"/>
    <if>
        <equals arg1="${configFileFound}" arg2="true" />
        <then>
            <property file="${configFile}" />
        </then>
        <else>
            <!-- default configuration variables -->
            <property name="deploy_dir" value="${build_dir}${env}-deployment" override="true"/>
            <property name="deploy_url" value="http://example.local" override="true"/>
        </else>
    </if>

    <!-- get host file for this environment -->
    <property name="hostFile" value="${project.basedir}/${build_dir}config/hosts/${env}.host"/>
    <available file="${hostFile}" property="hostFileFound" type="file"/>
    <if>
        <equals arg1="${hostFileFound}" arg2="true" />
        <then>
            <property file="${hostFile}"/>
        </then>
        <else>
            <!-- default host variables -->
            <property name="ftp.host" value="ftp.example.local" override="true"/>
            <property name="ftp.port" value="21" override="true"/>
            <property name="ftp.username" value="username" override="true"/>
            <property name="ftp.password" value="password" override="true"/>
            <property name="ftp.destinationDir" value="/" override="true"/>
            <property name="ftp.mode" value="binary" override="true"/>
            <property name="ssh.port" value="22" override="true"/>
        </else>
    </if>

    <!-- for rsync rollback -->
    <property name="dir.rsync.recover" value="rsync-${env}-recover"/>

    <!-- release name -->
    <fileset dir="." id="source:project" defaultexcludes="true">
        <!-- includes -->
        <include name="*/**"/>
        <!-- excludes -->
        <exclude name=".env"/>
        <exclude name=".env.example"/>
        <exclude name="${dir.remote.coverage}**/*"/>
        <exclude name="${build_dir}**/*"/>
        <exclude name="${dir.node}**/*"/>
        <exclude name="${dir.phpstorm}**/*"/>
        <exclude name="${dir.vagrant}**/*"/>
        <exclude name="${dir.puphpet}**/*"/>
        <exclude name="Vagrantfile"/>
        <exclude name="${dir.archive}**/*"/>
        <exclude name="${dir.originals}**/*"/>
        <exclude name="${dir.sql}**/*"/>
        <exclude name="video/**/*"/>


        <!-- exclude laravel cache storage -->
        <exclude name="${dir.storage.framework.cache}**/*"/>

        <!-- exclude laravel session storage -->
        <exclude name="${dir.storage.framework.session}**/*"/>

        <!-- exclude laravel view storage -->
        <exclude name="${dir.storage.framework.views}**/*"/>

        <!-- exclude laravel log storage -->
        <exclude name="${dir.storage.logs}**/*.log"/>

        <!-- exclude wordpress storage -->
        <exclude name="${dir.storage.wordpress}**/*"/>

        <!-- exclude wordpress uploads folder -->
        <exclude name="${dir.wp-content}uploads/**/*"/>

        <!-- exclude testing assets folder -->
        <exclude name="${dir.www}testing_assets/**/*"/>

        <!-- folders created by puppet -->
        <exclude name="${dir.www}icons/**/*"/>
        <exclude name="${dir.www}html/**/*"/>
        <exclude name="${dir.www}error/**/*"/>
        <exclude name="${dir.www}manual/**/*"/>
        <exclude name="icons/**/*"/>
        <exclude name="html/**/*"/>
        <exclude name="error/**/*"/>
        <exclude name="manual/**/*"/>

        <!-- archives created by bash scripts -->
        <exclude name="bash/**/*.tar"/>
    </fileset>

    <fileset dir="." id="source:app_storage" defaultexcludes="true">
        <!-- Include placeholders in storage so
        that folders get included -->
        <include name="${dir.storage}**/README.md" />
    </fileset>

    <!-- ============================================  -->
    <!-- Build: Storage placeholders                   -->
    <!-- make sure there's a place holder file         -->
    <!-- for the storage storage directories           -->
    <!-- ============================================  -->

    <target name="build:storage_placeholders">
        <echo file="${dir.storage.framework.cache}README.md" message="Cache storage for Laravel" append="false" />
        <echo file="${dir.storage.framework.session}README.md" message="Session storage for Laravel" append="false" />
        <echo file="${dir.storage.logs}README.md" message="Log storage for Laravel" append="false" />
        <echo file="${dir.storage.framework.views}README.md" message="View storage for Laravel" append="false" />
        <echo file="${dir.storage.wordpress}README.md" message="Storage for Wordpress" append="false" />
        <echo file="${dir.storage.app.public}README.md" message="Storage for App" append="false" />
    </target>

    <!-- ============================================  -->
    <!-- Fileset: project source files sans            -->
    <!-- library files                                 -->
    <!-- ============================================  -->
    <fileset dir="." id="source:php">
        <include name="**/*.php"/>
        <exclude name="${dir.vendor}**/*.php"/>
        <exclude name="${dir.www}wp/**/*.php"/>
        <exclude name="${build_dir}**/*"/>
        <exclude name=".phpstorm.meta.php"/>
        <exclude name="_ide_helper.php"/>
        <exclude name="c3.php"/>
    </fileset>

    <!-- ============================================  -->
    <!-- Target: Confirm config and host files exist   -->
    <!-- ============================================  -->
    <target name="task:confirm_config">
        <!-- check that the env.config file exists-->
        <available file="${configFile}" property="configFileFound" value="true"/>
        <fail unless="configFileFound" message="Missing host configuration file (${configFile})!"/>

        <!-- check that the env.host file exists -->
        <available file="${hostFile}" property="hostFileFound" value="true"/>
        <fail unless="hostFileFound" message="Missing host configuration file (${hostFile})!"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: prepare tests                         -->
    <!-- ============================================  -->
    <target name="build:prepare">
        <delete dir="${dir.package}"/>
        <delete dir="${dir.package}${env}"/>
        <delete dir="${dir.package}${env}/${phing.project.name}"/>
        <delete dir="${deploy_dir}"/>
        <mkdir dir="${dir.package}"/>
        <mkdir dir="${dir.reports}"/>

        <!-- run build commands -->
        <exec command="npm update" level="info" checkreturn="true" />
        <exec command="gulp" level="info" checkreturn="true" />
        <exec command="bower update" level="info" checkreturn="true" />
        <!-- run download of tools -->
        <exec command="wget -q -N https://raw.githubusercontent.com/Codeception/c3/2.0/c3.php -O c3.php" level="info" checkreturn="true" />
        <exec command="wget -q -N http://codeception.com/codecept.phar -O codecept.phar" level="info" checkreturn="true" />

    </target>

    <!-- ============================================  -->
    <!-- Target: metrics                               -->
    <!-- ============================================  -->
    <target name="task:metrics" depends="build:prepare">
        <property name="do_metrics" value="true" override="true"/>
        <echo message="do_metrics is set to '${do_metrics}'" />
        <if>
            <equals arg1="${do_metrics}" arg2="1" />
            <then>
                <echo message="Some of these targets are *very* memory intensive. You may have to increase your memory_limit in php.ini"/>
                <phingcall target="task:lint"/>
                <phingcall target="task:run_tests"/>
                <!--<phingcall target="task:phploc" />-->
                <!--<phingcall target="task:depend" />-->
                <!--<phingcall target="task:cpd" />-->
                <!--<phingcall target="churn-grep" />-->
                <!--<phingcall target="task:phpmd" />-->
                <!--<phingcall target="task:codesniffer" />-->
                <!--<phingcall target="task:cleanup_phpunit_report" />-->
            </then>
        </if>
    </target>

    <!-- ============================================  -->
    <!-- Target: Linting and Metrics                   -->
    <!-- ============================================  -->
    <target name="task:standards" depends="task:metrics"/>

    <!-- ============================================  -->
    <!-- Target: Package                               -->
    <!-- ============================================  -->
    <target name="build:package" depends="build:prepare, task:standards, build:storage_placeholders"
            description="Packages source file for deployment to remote host">

        <delete file="${build_dir}${phing.project.name}-${env}-${releaseName}.tar.gz"/>
        <delete file="${build_dir}${phing.project.name}-${env}-${releaseName}.zip"/>
        <delete dir="${dir.package}"/>
        <mkdir dir="${dir.package}"/>
        <mkdir dir="${dir.package}${env}"/>
        <mkdir dir="${dir.package}${env}/${phing.project.name}"/>

        <!-- copy all source files to package directory -->
        <echo msg="Copying files to build directory"/>
        <copy todir="${dir.package}" overwrite="true" includeemptydirs="false">
            <fileset refid="source:project" />
            <fileset refid="source:app_storage" />
        </copy>
        <!-- Run exclude of packaged files -->
        <phingcall target="task:package-exclude" />
        <delete>
            <fileset dir="${dir.package}">
                <include name="*.git"/>
                <include name="*.gitignore"/>
            </fileset>
        </delete>
        <exec command="tar czf ${build_dir}${phing.project.name}-${env}-${releaseName}.tar.gz ${dir.package}" passthru="true" level="info" />
    </target>

    <!-- ============================================  -->
    <!-- Target: Extract Package                       -->
    <!-- Clean and extract the packaged archive        -->
    <!-- ============================================  -->

    <target name="build:extract_package" description="extract the current build archive">
        <echo message="Resetting ${env} deploy files"/>
        <delete dir="${deploy_dir}"/>
        <mkdir dir="${deploy_dir}"/>
        <exec command="tar -xf ${build_dir}${phing.project.name}-${env}-${releaseName}.tar.gz -C ${deploy_dir}" passthru="true" level="info" />
    </target>

    <!-- ============================================  -->
    <!-- Target: Post deployment actions               -->
    <!-- ============================================  -->
    <target name="build:post_deploy">
        <!-- install fresh version of composer over on server side -->
        <phingcall target="task:composer_refresh"/>

        <!-- optimize the laravel install on the other side -->
        <phingcall target="task:laravel_optimize" />

        <!-- run migrations on remote -->
        <phingcall target="task:artisan_migrate"/>

        <!-- run key generation on remote -->
        <phingcall target="task:artisan_keys"/>

        <!-- run config cache remake on remote -->
        <phingcall target="task:artisan_clear_config"/>

        <!-- run cleanup -->
        <phingcall target="build:cleanup" />

        <phingcall target="task:rollbar_deploy"/>

    </target>

    <!-- ============================================  -->
    <!-- Target: Rollbar deployment notification       -->
    <!-- ============================================  -->
    <target name="task:rollbar_deploy">
        <exec passthru="true" command="bash ${build_dir}rollbar-deploy.sh ${env}"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: Optimize Laravel build                -->
    <!-- Artisan commands:                             -->
    <!-- clear-compiled                                -->
    <!-- optimize                                      -->
    <!-- cache:clear                                   -->
    <!-- view:clear                                    -->
    <!-- config:cache                                  -->
    <!-- ============================================  -->

    <target name="task:laravel_optimize">

        <if>
            <equals arg1="${env}" arg2="development"/>
            <then>
                <echo message="laravel optimize is not required for ${env} environment"/>
            </then>
            <else>
                <ssh username="${ftp.username}"
                     host="${ftp.host}"
                     port="${ssh.port}"
                     privkeyfile="~/.ssh/id_rsa"
                     pubkeyfile="~/.ssh/id_rsa.pub"
                     command="cd /home/${ftp.username}; php artisan clear-compiled; php artisan optimize; php artisan cache:clear; php artisan view:clear; php artisan config:cache"
                     display="true"/>
            </else>
        </if>

    </target>

    <!-- ============================================  -->
    <!-- Target: cleanup after packaging               -->
    <!-- ============================================  -->
    <target name="build:cleanup">
        <delete dir="${dir.package}"/>
        <delete dir="${dir.package}${env}"/>
        <delete dir="${dir.package}${env}/${phing.project.name}"/>
        <delete dir="${deploy_dir}"/>
        <delete dir="${build_dir}${build_dir}"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: Composer Refresh                      -->
    <!-- Refreshes remote install of Composer          -->
    <!-- ============================================  -->
    <target name="task:composer_refresh" description="refresh composer install">

        <!-- install fresh version of composer over on server side-->
        <if>
            <equals arg1="${env}" arg2="development"/>
            <then>
                <echo message="Composer install is not required for ${env} environment"/>
            </then>
            <else>
                <ssh username="${ftp.username}"
                     host="${ftp.host}"
                     port="${ssh.port}"
                     privkeyfile="~/.ssh/id_rsa"
                     pubkeyfile="~/.ssh/id_rsa.pub"
                     command="cd /home/${ftp.username}; if [ ! -f composer.phar ]; then wget https://getcomposer.org/composer.phar; fi; php composer.phar self-update; yes | php composer.phar dump-autoload --no-dev --optimize"
                     display="true"/>
            </else>
        </if>

    </target>
    <!-- ============================================  -->
    <!-- Target: Artisan Migrate                       -->
    <!-- Run migration on remote                       -->
    <!-- ============================================  -->
    <target name="task:artisan_migrate" description="run laravel artisan migrate on remote">

        <if>
            <equals arg1="${env}" arg2="development"/>
            <then>
                <echo message="migration is not required for ${env} environment"/>
            </then>
            <else>
                <!-- ssh into server and turn down laravel and wordpress, then run migrations and bring both wordpress and laravel back up -->
                <ssh username="${ftp.username}"
                     host="${ftp.host}"
                     port="${ssh.port}"
                     privkeyfile="~/.ssh/id_rsa"
                     pubkeyfile="~/.ssh/id_rsa.pub"
                     command="cd /home/${ftp.username}; php artisan down; php artisan wp:down; php artisan migrate --force; php artisan up; php artisan wp:up"
                     display="true"/>
            </else>
        </if>

    </target>

    <!-- ============================================  -->
    <!-- Target: Artisan clear config cache            -->
    <!-- Clear Laravel configuration cache on remote   -->
    <!-- ============================================  -->
    <target name="task:artisan_clear_config" description="run laravel artisan clear config cache on remote">

        <if>
            <equals arg1="${env}" arg2="development"/>
            <then>
                <echo message="migration is not required for ${env} environment"/>
            </then>
            <else>
                <!-- ssh into server and turn down laravel and wordpress, then clear the config cache, remake it and bring both wordpress and laravel back up -->
                <ssh username="${ftp.username}"
                     host="${ftp.host}"
                     port="${ssh.port}"
                     privkeyfile="~/.ssh/id_rsa"
                     pubkeyfile="~/.ssh/id_rsa.pub"
                     command="cd /home/${ftp.username}; php artisan down; php artisan wp:down; php artisan config:clear; php artisan config:cache; php artisan up; php artisan wp:up"
                     display="true"/>
            </else>
        </if>

    </target>

    <!-- ============================================  -->
    <!-- Target: Artisan Keys                          -->
    <!-- Run migration on remote                       -->
    <!-- ============================================  -->
    <target name="task:artisan_keys" description="run laravel and wordpress artisan keys on remote">

        <if>
            <equals arg1="${env}" arg2="development"/>
            <then>
                <echo message="key generation is not required for ${env} environment"/>
            </then>
            <else>
                <!-- ssh into server and turn down laravel and wordpress, then run migrations and bring both wordpress and laravel back up -->
                <ssh username="${ftp.username}"
                     host="${ftp.host}"
                     port="${ssh.port}"
                     privkeyfile="~/.ssh/id_rsa"
                     pubkeyfile="~/.ssh/id_rsa.pub"
                     command="cd /home/${ftp.username}; php artisan key:generate; php artisan wp:keys;"
                     display="true"/>
            </else>
        </if>

    </target>



    <!-- ============================================  -->
    <!-- Target: Deployment                            -->
    <!-- Depends on "env" for server deployment        -->
    <!-- ============================================  -->

    <target name="build:deploy" depends="build:package" description="Deploys the current working copy to a remote host">

        <if>
            <equals arg1="${env}" arg2="development"/>
            <then>
                <echo message="deployment not needed in ${env} environment"/>
            </then>
            <else>
                <phingcall target="build:extract_package"/>
                <echo message="Deploying to ${env} on ${ftp.host} -> /home/${ftp.username}"/>

<!--                <filesync
                        rsyncPath="/usr/local/bin/rsync"
                        sourceDir="${deploy_dir}/${dir.package}"
                        destinationDir="${ftp.username}@${ftp.host}:/home/${ftp.username}"
                        exclude=""
                        excludeFile=""
                        backupDir="/home/${ftp.username}/bk-${dir.package}"
                        options="-e 'ssh -p ${ssh.port}' -rpKzl"
                        verbose="true"
                        dryRun="false"
                        itemizeChanges="true"
                        checksum="false"
                        delete="false"
                        identityFile="~/.ssh/id_rsa"/>-->

                <scp username="${ftp.username}"
                     host="${ftp.host}"
                     todir="/home/${ftp.username}"
                     port="${ssh.port}"
                     level="info"
                     privkeyfile="~/.ssh/id_rsa"
                     pubkeyfile="~/.ssh/id_rsa.pub">
                    <fileset dir="${deploy_dir}/${dir.package}"/>
                </scp>

                <echo message="${env} deploy complete!"/>
                <delete dir="${deploy_dir}"/>

            </else>
        </if>

    </target>

    <!-- ============================================  -->
    <!-- Target: PHP Lint                              -->
    <!-- ============================================  -->
    <target name="task:lint">
        <phplint haltonfailure="true" level="verbose">
            <fileset refid="source:php"/>
        </phplint>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP Copy paste detector               -->
    <!-- ============================================  -->
    <!--  -->
    <target name="task:cpd" depends="build:prepare">
        <!-- http://www.unit_tests.info/trac/ticket/1061
        <phpcpd>
            <fileset refid="source:php" />
            <formatter type="pmd" outfile="${dir.reports}cpd.xml" />
        </phpcpd>-->
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP mess detector                     -->
    <!-- ============================================  -->
    <target name="task:phpmd" depends="build:prepare">
        <phpmd>
            <fileset refid="source:php"/>
            <formatter type="xml" outfile="${dir.reports}pmd.xml"/>
        </phpmd>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP depend                            -->
    <!-- ============================================  -->
    <target name="task:depend" depends="build:prepare">
        <phpdepend>
            <fileset refid="source:php"/>
            <logger type="jdepend-xml" outfile="${dir.reports}jdepend.xml"/>
            <analyzer type="coderank-mode" value="method"/>
        </phpdepend>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP code sniffer                      -->
    <!-- ============================================  -->
    <target name="task:codesniffer" depends="build:prepare">
        <echo message="If you don't have the PSR standards installed, just follow the instructions here: https://github.com/klaussilveira/phpcs-psr"/>
        <phpcodesniffer standard="PSR1" verbosity="1">
            <fileset refid="source:php"/>
            <formatter type="checkstyle" outfile="/wamp/www/${project.name}/${dir.reports}codesniffer.xml"/>
            <formatter type="summary"
                       outfile="/wamp/www/${project.name}/${dir.reports}codesniffer-summary.xml"/>
        </phpcodesniffer>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP LOC                               -->
    <!-- ============================================  -->
    <target name="task:phploc" depends="build:prepare">
        <exec command="phploc --log-xml ${dir.reports}phploc.xml --exclude xxx ${project.basedir}/"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP DOC                               -->
    <!-- ============================================  -->
    <target name="task:phpdoc" depends="build:prepare">
        <exec command="phpdoc -d classes,includes,modules,styles -t ${dir.reports}docs --template=responsive-twig"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: Run Tests                             -->
    <!-- ============================================  -->
    <target name="task:run_tests" depends="build:vagrant, build:composer">
        <!-- run tests in vagrant box, if an "Could not open input file" is
        found that likely means that vagrant box is faulty and should
        be recreated -->
        <exec command="bash testing.sh" checkreturn="true" passthru="true" level="info" />
        <!-- test the return content, if it has
        "Could not open input file" in it
        rebuild the box and rerun tests -->
        <exec command="v=$(which vagrant); if grep -Fxq &quot;Could not open input file&quot; codecept-result.log; then eval &quot;${v} eval &quot;${v} up&quot; &amp;&amp; bash testing.sh; fi;" checkreturn="true" passthru="true" level="info" />
    </target>


    <!-- ============================================  -->
    <!-- Target: Vagrant                               -->
    <!-- Spin up a vagrant box                         -->
    <!-- ============================================  -->
    <target name="build:vagrant">
        <exec command="v=$(which vagrant); eval &quot;${v} up&quot;" checkreturn="true" passthru="true" level="info" />
    </target>

    <!-- ============================================  -->
    <!-- Target: Composer                              -->
    <!-- Update composer via vagrant ssh               -->
    <!-- ============================================  -->
    <target name="build:composer">
        <exec command="vagrant ssh -c &quot;cd /var/www &amp;&amp; yes | php composer.phar update&quot;" checkreturn="true" passthru="true" level="info" />
    </target>


    <!-- ============================================  -->
    <!-- Target: PHP Unit Cleanup                      -->
    <!-- ============================================  -->
    <target name="task:cleanup_phpunit_report">
        <copy file="${build_dir}tests/${dir.reports}test-logs.xml" tofile="${dir.reports}test-logs.xml"
              overwrite="true"/>
        <delete dir="${build_dir}tests/${build_dir}" verbose="true" failonerror="true"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP Unit Cleanup                      -->
    <!-- ============================================  -->
    <target name="task:package-exclude">
        <echo message="Running package exclude" />
        <exec command="bash ${build_dir}package-exclude.sh '${dir.package}'" checkreturn="true" passthru="true" level="info" />
    </target>

</project>